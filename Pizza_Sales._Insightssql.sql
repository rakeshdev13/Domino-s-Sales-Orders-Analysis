USE SALES;
select * from order_details;
select * from orders;
select * from pizza_types;
select * from pizzas;

-- 1.Retrieve the total number of orders placed.
CREATE VIEW TOTAL_ORDERS AS
select count(order_id) as TotalOrders from orders;

SELECT * FROM TOTAL_ORDERS;

-- 2.Calculate the total revenue generated from pizza sales.
CREATE VIEW TOTALREVENUE AS 
SELECT ROUND(SUM(O.QUANTITY * P.PRICE),2) AS TOTAL_REVENUE FROM ORDER_DETAILS O JOIN PIZZAS P
ON O.PIZZA_ID = P.PIZZA_ID;

SELECT * FROM TOTALREVENUE;

-- 4.Identify the highest-priced pizza.
CREATE VIEW HIGEST_PRICED_PIZAA AS
SELECT P.NAME, PI.PRICE FROM PIZZA_TYPES P JOIN PIZZAS PI
USING(PIZZA_TYPE_ID) ORDER BY PI.PRICE DESC LIMIT 1;

SELECT * FROM HIGEST_PRICED_PIZAA;

-- Identify the most common pizza size ordered.
CREATE VIEW COMMON_PIZZA_SIZE AS
SELECT P.SIZE, SUM(O.QUANTITY) AS ORDERSUNIT FROM PIZZAS P JOIN ORDER_DETAILS O 
USING(PIZZA_ID) GROUP BY P.SIZE ORDER BY ORDERSUNIT DESC limit 1;

SELECT * FROM COMMON_PIZZA_SIZE;

-- 5.List the top 5 most ordered pizza types along with their quantities.
CREATE VIEW TOP5_ORDERED_PIZZA AS
SELECT P.NAME, SUM(O.QUANTITY) AS ORDERSUNIT FROM PIZZA_TYPES P JOIN  PIZZAS PI 
ON P.PIZZA_TYPE_ID = PI.PIZZA_TYPE_ID  JOIN ORDER_DETAILS O USING(PIZZA_ID) GROUP BY P.NAME ORDER BY ORDERSUNIT DESC limit 5; 

SELECT * FROM TOP5_ORDERED_PIZZA;

-- Join the necessary tables to find the total quantity of each pizza category ordered.
CREATE VIEW  CATEGORY_TOTALQUANITY AS
SELECT PT.CATEGORY, SUM(O.QUANTITY) AS TOTALQUANTITY FROM PIZZA_TYPES PT JOIN PIZZAS P
ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID JOIN ORDER_DETAILS O USING(PIZZA_ID) GROUP BY PT.CATEGORY ORDER BY TOTALQUANTITY DESC;

SELECT * FROM CATEGORY_TOTALQUANITY;

-- Determine the distribution of orders by hour of the day.
CREATE VIEW ORDER_BY_HOURS AS
SELECT HOUR(ORDER_TIME) AS HOURS ,COUNT(ORDER_ID) AS TOTALORDERS FROM ORDERS GROUP BY HOURS;

SELECT * FROM  ORDER_BY_HOURS;

-- To find the category-wise distribution of pizzas.
CREATE VIEW CATEGORYWISE_DISTRIBUTION AS
SELECT CATEGORY, COUNT(NAME) FROM PIZZA_TYPES GROUP BY CATEGORY;

SELECT * FROM CATEGORYWISE_DISTRIBUTION;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
CREATE VIEW AVG_PIZZASPERDAY AS
SELECT ROUND(AVG(TOTAL),0) FROM (SELECT DATE(ORDER_DATE) AS ORDERDATE, SUM(O.QUANTITY) AS TOTAL  FROM ORDERS OD JOIN ORDER_DETAILS O
USING(ORDER_ID)
GROUP BY ORDERDATE) AS ORDERQUANTITY;

SELECT * FROM AVG_PIZZASPERDAY;

-- Determine the top 3 most ordered pizza types based on revenue.
CREATE VIEW TOP3_ORDEREDPIZZA AS
SELECT PT.NAME, ROUND(SUM(P.PRICE * O.QUANTITY),2) AS TOTALREVENUE FROM PIZZA_TYPES PT JOIN PIZZAS P
 USING(pizza_type_id)   JOIN ORDER_DETAILS O USING(pizza_id)  GROUP BY PT.NAME ORDER BY TOTALREVENUE DESC LIMIT 3;
 
SELECT * FROM TOP3_ORDEREDPIZZA;

-- Calculate the percentage contribution of each pizza type to total revenue.
CREATE VIEW PIZZATYE_REVENUE AS
SELECT PT.CATEGORY, ROUND(SUM(P.PRICE * O.QUANTITY) / 
(SELECT ROUND(SUM(O.QUANTITY * P.PRICE),2) AS TOTAL_REVENUE FROM ORDER_DETAILS O JOIN PIZZAS P
ON O.PIZZA_ID = P.PIZZA_ID)*100,2) AS REVENUE_PERCENTAGE
FROM PIZZA_TYPES PT JOIN PIZZAS P
USING(pizza_type_id)   JOIN ORDER_DETAILS O USING(pizza_id)  GROUP BY PT.CATEGORY ORDER BY REVENUE_PERCENTAGE DESC;

SELECT * FROM PIZZATYE_REVENUE;

-- Analyze the cumulative revenue generated over time.
CREATE VIEW CUMULATIVEREVENUE_DATEWISE AS
SELECT ORDER_DATE, SUM(REVENUE) OVER(ORDER BY ORDER_DATE) AS CUMULATIVE_REVENUE
 FROM  (SELECT ORDER_DATE, SUM(P.PRICE * O.QUANTITY) AS REVENUE FROM 
ORDER_DETAILS O JOIN ORDERS OD USING(ORDER_ID)
JOIN PIZZAS P USING(PIZZA_ID) GROUP BY ORDER_DATE
) AS SALES;

Select * from CUMULATIVEREVENUE_DATEWISE;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
CREATE VIEW TOP3PIZZAS_BASEDON_REVENUE AS
SELECT * FROM(SELECT CATEGORY, NAME, REVENUE, DENSE_RANK() OVER(PARTITION BY CATEGORY ORDER BY REVENUE DESC) AS TOP FROM 
(SELECT PT.CATEGORY, PT.NAME, SUM(P.PRICE * O.QUANTITY) AS REVENUE FROM
PIZZA_TYPES PT JOIN PIZZAS P USING(pizza_type_id) 
JOIN ORDER_DETAILS O USING(PIZZA_ID)
GROUP BY  PT.CATEGORY, PT.NAME ORDER BY REVENUE DESC) AS SALES) AS SALE
WHERE TOP<=3;

SELECT * FROM TOP3PIZZAS_BASEDON_REVENUE;




